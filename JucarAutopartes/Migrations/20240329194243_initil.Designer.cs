// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository;

#nullable disable

namespace INVENTARIOS.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20240329194243_initil")]
    partial class initil
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.Models.Categoria", b =>
                {
                    b.Property<Guid>("IdCategoria")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdCategoria");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("IdCategoria");

                    b.ToTable("Categorias");

                    b.HasData(
                        new
                        {
                            IdCategoria = new Guid("4f9a7cdb-c6dd-4c1c-8ca2-88f34c913c54"),
                            Nombre = "Portatiles"
                        },
                        new
                        {
                            IdCategoria = new Guid("b130f449-a5f3-4e3e-a165-d73c3b73a241"),
                            Nombre = "Auriculares"
                        },
                        new
                        {
                            IdCategoria = new Guid("5af38236-256e-4ded-a81e-8010f08c51b6"),
                            Nombre = "Implementos"
                        });
                });

            modelBuilder.Entity("Entities.Models.Cliente", b =>
                {
                    b.Property<Guid>("IdCliente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdProveedor");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<long?>("Contacto")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Documento")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("IdCliente");

                    b.ToTable("Clientes");

                    b.HasData(
                        new
                        {
                            IdCliente = new Guid("80abbca8-664d-4b20-b5de-024705497d4a"),
                            Apellido = "Rodriguez",
                            Contacto = 3131314131L,
                            Correo = "Rodriguez@gmail.com",
                            Direccion = "lisboa",
                            Documento = "39487334",
                            Nombre = "Angel Correa"
                        },
                        new
                        {
                            IdCliente = new Guid("021ca3c1-0deb-4afd-ae94-2159a8479811"),
                            Apellido = "Ortega",
                            Contacto = 313132352131L,
                            Correo = "Ortega@gmail.com",
                            Direccion = "Gaitana",
                            Documento = "3958934",
                            Nombre = "Maicol Ortega"
                        },
                        new
                        {
                            IdCliente = new Guid("021ca3c1-0deb-4afd-ae94-2159a8479815"),
                            Apellido = "Cardenas",
                            Contacto = 3134623131L,
                            Correo = "Cardenas@gmail.com",
                            Direccion = "Bilbao",
                            Documento = "3948934",
                            Nombre = "Bryan Linares"
                        });
                });

            modelBuilder.Entity("Entities.Models.DetalleFacturaCompra", b =>
                {
                    b.Property<Guid>("DetalleFacturaCompraId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DetalleFacturaCompraId");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<Guid>("FacturaCompraId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("IVA")
                        .HasColumnType("real");

                    b.Property<Guid>("ProductoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("ValorDescuento")
                        .HasColumnType("real");

                    b.Property<float>("ValorUnitario")
                        .HasColumnType("real");

                    b.HasKey("DetalleFacturaCompraId");

                    b.HasIndex("FacturaCompraId");

                    b.HasIndex("ProductoId");

                    b.ToTable("DetallesFacturaCompras");

                    b.HasData(
                        new
                        {
                            DetalleFacturaCompraId = new Guid("ccd4cc9b-87f5-4cf2-65b4-08dbfb6a7af1"),
                            Cantidad = 2,
                            FacturaCompraId = new Guid("5c5b2abf-5de1-49cb-98b8-6c13fddc7a6e"),
                            IVA = 0.3f,
                            ProductoId = new Guid("03a78db6-0e2e-4d18-9001-fbccb5cc2dca"),
                            ValorDescuento = 0.05f,
                            ValorUnitario = 250000f
                        },
                        new
                        {
                            DetalleFacturaCompraId = new Guid("69cc48c7-b5a1-487f-cb3b-08dbfb6a7af6"),
                            Cantidad = 4,
                            FacturaCompraId = new Guid("6e922ba7-f823-4a3b-81ef-65a55a981c60"),
                            IVA = 0.3f,
                            ProductoId = new Guid("03a78db6-0e2e-4d18-9001-fbccb5cc2dca"),
                            ValorDescuento = 0.05f,
                            ValorUnitario = 500000f
                        });
                });

            modelBuilder.Entity("Entities.Models.DetalleFacturaVenta", b =>
                {
                    b.Property<Guid>("DetalleFacturaVentaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DetalleFacturaVentaId");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<Guid>("FacturaVentaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("IVA")
                        .HasColumnType("real");

                    b.Property<Guid>("ProductoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("ValorDescuento")
                        .HasColumnType("real");

                    b.Property<float>("ValorUnitario")
                        .HasColumnType("real");

                    b.HasKey("DetalleFacturaVentaId");

                    b.HasIndex("FacturaVentaId");

                    b.HasIndex("ProductoId");

                    b.ToTable("DetallesFacturaVentas");

                    b.HasData(
                        new
                        {
                            DetalleFacturaVentaId = new Guid("3239a8db-ba0d-471e-cb3c-08dbfb6a7af6"),
                            Cantidad = 2,
                            FacturaVentaId = new Guid("ceda0177-4b48-4379-8907-b75c4f0aa10f"),
                            IVA = 8075f,
                            ProductoId = new Guid("03a78db6-0e2e-4d18-9001-fbccb5cc2dca"),
                            ValorDescuento = 0f,
                            ValorUnitario = 42500f
                        },
                        new
                        {
                            DetalleFacturaVentaId = new Guid("dd412a46-bf61-4853-6439-08dbfb6aabed"),
                            Cantidad = 2,
                            FacturaVentaId = new Guid("a6cf357e-205e-45f4-be76-25c8e08aac16"),
                            IVA = 1534f,
                            ProductoId = new Guid("3bbe0bbe-0379-4d32-9fd9-d74a51d319a6"),
                            ValorDescuento = 0f,
                            ValorUnitario = 60000f
                        });
                });

            modelBuilder.Entity("Entities.Models.FacturaCompra", b =>
                {
                    b.Property<Guid>("FacturaCompraId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("FacturaCompraId");

                    b.Property<DateTime?>("FechaExpedicion")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaGeneracion")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaVencimiento")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdProveedor")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NFactura")
                        .HasColumnType("int");

                    b.Property<Guid?>("ProveedoresIdProveedor")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("TotalBruto")
                        .HasColumnType("real");

                    b.Property<float>("TotalIVA")
                        .HasColumnType("real");

                    b.Property<float>("TotalPago")
                        .HasColumnType("real");

                    b.Property<float>("TotalRetFuente")
                        .HasColumnType("real");

                    b.HasKey("FacturaCompraId");

                    b.HasIndex("ProveedoresIdProveedor");

                    b.ToTable("FacturasCompras");

                    b.HasData(
                        new
                        {
                            FacturaCompraId = new Guid("5c5b2abf-5de1-49cb-98b8-6c13fddc7a6e"),
                            FechaExpedicion = new DateTime(1995, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaGeneracion = new DateTime(1995, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaVencimiento = new DateTime(1995, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdProveedor = new Guid("c9d4c051-49b6-410c-bc78-2d54a9991880"),
                            NFactura = 1,
                            TotalBruto = 100000f,
                            TotalIVA = 19000f,
                            TotalPago = 139000f,
                            TotalRetFuente = 20000f
                        },
                        new
                        {
                            FacturaCompraId = new Guid("6e922ba7-f823-4a3b-81ef-65a55a981c60"),
                            FechaExpedicion = new DateTime(2000, 10, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaGeneracion = new DateTime(2000, 10, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaVencimiento = new DateTime(2000, 10, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdProveedor = new Guid("c9d4c053-49b6-410c-bc78-2d54a9991870"),
                            NFactura = 2,
                            TotalBruto = 150000f,
                            TotalIVA = 2850f,
                            TotalPago = 182850f,
                            TotalRetFuente = 30000f
                        });
                });

            modelBuilder.Entity("Entities.Models.FacturaVenta", b =>
                {
                    b.Property<Guid>("FacturaVentaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("FacturaVentaId");

                    b.Property<Guid>("ClienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("FechaExpedicion")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaGeneracion")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaVencimiento")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<int>("NFactura")
                        .HasColumnType("int");

                    b.Property<float>("TotalBruto")
                        .HasColumnType("real");

                    b.Property<float>("TotalIVA")
                        .HasColumnType("real");

                    b.Property<float>("TotalPago")
                        .HasColumnType("real");

                    b.Property<float>("TotalRetFuente")
                        .HasColumnType("real");

                    b.HasKey("FacturaVentaId");

                    b.HasIndex("ClienteId");

                    b.ToTable("FacturasVentas");

                    b.HasData(
                        new
                        {
                            FacturaVentaId = new Guid("ceda0177-4b48-4379-8907-b75c4f0aa10f"),
                            ClienteId = new Guid("021ca3c1-0deb-4afd-ae94-2159a8479811"),
                            FechaExpedicion = new DateTime(2023, 8, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaGeneracion = new DateTime(2023, 8, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaVencimiento = new DateTime(2023, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NFactura = 1,
                            TotalBruto = 85000f,
                            TotalIVA = 16150f,
                            TotalPago = 113150f,
                            TotalRetFuente = 12000f
                        },
                        new
                        {
                            FacturaVentaId = new Guid("a6cf357e-205e-45f4-be76-25c8e08aac16"),
                            ClienteId = new Guid("80abbca8-664d-4b20-b5de-024705497d4a"),
                            FechaExpedicion = new DateTime(2023, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaGeneracion = new DateTime(2023, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaVencimiento = new DateTime(2023, 7, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NFactura = 2,
                            TotalBruto = 120000f,
                            TotalIVA = 22800f,
                            TotalPago = 157800f,
                            TotalRetFuente = 15000f
                        });
                });

            modelBuilder.Entity("Entities.Models.MetodoPago", b =>
                {
                    b.Property<Guid>("IdMetodoPago")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdMetodoPago");

                    b.Property<Guid>("FacturaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("FechaTransaccion")
                        .HasColumnType("datetime2");

                    b.Property<int>("Monto")
                        .HasColumnType("int");

                    b.Property<string>("NombrePlataforma")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("IdMetodoPago");

                    b.HasIndex("FacturaId");

                    b.ToTable("MetodoPagos");

                    b.HasData(
                        new
                        {
                            IdMetodoPago = new Guid("5ef90d94-ca4a-49fe-ba78-e42e1c527606"),
                            FacturaId = new Guid("ceda0177-4b48-4379-8907-b75c4f0aa10f"),
                            FechaTransaccion = new DateTime(2023, 6, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Monto = 25000,
                            NombrePlataforma = "Nequi"
                        },
                        new
                        {
                            IdMetodoPago = new Guid("86dba8c0-d178-41e7-938c-ed49778fb52a"),
                            FacturaId = new Guid("a6cf357e-205e-45f4-be76-25c8e08aac16"),
                            FechaTransaccion = new DateTime(2023, 6, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Monto = 25000,
                            NombrePlataforma = "Daviplata"
                        });
                });

            modelBuilder.Entity("Entities.Models.Precios", b =>
                {
                    b.Property<Guid>("IdHistoricoPrecios")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdHistoricoPrecios");

                    b.Property<string>("Estado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaDescuento")
                        .HasColumnType("datetime2");

                    b.Property<float>("PrecioCompra")
                        .HasMaxLength(60)
                        .HasColumnType("real");

                    b.Property<float>("PrecioDescuento")
                        .HasColumnType("real");

                    b.Property<float>("PrecioVenta")
                        .HasMaxLength(60)
                        .HasColumnType("real");

                    b.Property<Guid>("ProductoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdHistoricoPrecios");

                    b.HasIndex("ProductoId");

                    b.ToTable("HistoricosPrecios");

                    b.HasData(
                        new
                        {
                            IdHistoricoPrecios = new Guid("369ccaf1-e340-4ee9-b612-acc195dc856a"),
                            Estado = "Inactivo",
                            FechaDescuento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified).AddTicks(24),
                            PrecioCompra = 342f,
                            PrecioDescuento = 234f,
                            PrecioVenta = 342f,
                            ProductoId = new Guid("6bd9dded-9a5f-412c-9575-2110dbd9b7c6")
                        },
                        new
                        {
                            IdHistoricoPrecios = new Guid("c20a3432-81eb-48c2-a25e-6574cd445cbb"),
                            Estado = "Inactivo",
                            FechaDescuento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified).AddTicks(24),
                            PrecioCompra = 34f,
                            PrecioDescuento = 45f,
                            PrecioVenta = 45f,
                            ProductoId = new Guid("03a78db6-0e2e-4d18-9001-fbccb5cc2dca")
                        },
                        new
                        {
                            IdHistoricoPrecios = new Guid("8285b178-56af-4939-aada-e35f6e067db5"),
                            Estado = "Inactivo",
                            FechaDescuento = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified).AddTicks(24),
                            PrecioCompra = 678f,
                            PrecioDescuento = 456f,
                            PrecioVenta = 456f,
                            ProductoId = new Guid("3bbe0bbe-0379-4d32-9fd9-d74a51d319a6")
                        });
                });

            modelBuilder.Entity("Entities.Models.Producto", b =>
                {
                    b.Property<Guid>("ProductoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProductoId");

                    b.Property<int>("Cantidad")
                        .HasMaxLength(60)
                        .HasColumnType("int");

                    b.Property<string>("Estado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("IdCategoria")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Lugar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<float>("Precio")
                        .HasColumnType("real");

                    b.Property<Guid>("StockId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductoId");

                    b.HasIndex("IdCategoria");

                    b.HasIndex("StockId");

                    b.ToTable("Productos");

                    b.HasData(
                        new
                        {
                            ProductoId = new Guid("6bd9dded-9a5f-412c-9575-2110dbd9b7c6"),
                            Cantidad = 1,
                            Estado = "Activo",
                            IdCategoria = new Guid("4f9a7cdb-c6dd-4c1c-8ca2-88f34c913c54"),
                            Lugar = "Estante 2",
                            Nombre = "Computador Samsung 2018",
                            Precio = 2600000f,
                            StockId = new Guid("e9208668-35d6-4862-b4f6-2b3fe8f6a525")
                        },
                        new
                        {
                            ProductoId = new Guid("03a78db6-0e2e-4d18-9001-fbccb5cc2dca"),
                            Cantidad = 1,
                            Estado = "Activo",
                            IdCategoria = new Guid("b130f449-a5f3-4e3e-a165-d73c3b73a241"),
                            Lugar = "Estante 1",
                            Nombre = "Audifonos inalambricos",
                            Precio = 250000f,
                            StockId = new Guid("f46678ca-5e2e-4b36-8d56-5eb110770bbe")
                        },
                        new
                        {
                            ProductoId = new Guid("3bbe0bbe-0379-4d32-9fd9-d74a51d319a6"),
                            Cantidad = 1,
                            Estado = "Activo",
                            IdCategoria = new Guid("5af38236-256e-4ded-a81e-8010f08c51b6"),
                            Lugar = "Estante 3",
                            Nombre = "Mouse inalambrico",
                            Precio = 50000f,
                            StockId = new Guid("9fffc55a-186f-4d62-88b4-78b43b2948c1")
                        });
                });

            modelBuilder.Entity("Entities.Models.Proveedor", b =>
                {
                    b.Property<Guid>("IdProveedor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdProveedor");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<long?>("Contacto")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("bigint");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("NitProveedor")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("IdProveedor");

                    b.ToTable("Proveedores");

                    b.HasData(
                        new
                        {
                            IdProveedor = new Guid("c9d4c053-49b6-410c-bc78-2d54a9991870"),
                            Apellido = "Rodriguez",
                            Contacto = 31313131L,
                            Correo = "Rodriguez@gmail.com",
                            Direccion = "lisboa",
                            NitProveedor = "39487358934",
                            Nombre = "Angel Correa"
                        },
                        new
                        {
                            IdProveedor = new Guid("c9d4c051-49b6-410c-bc78-2d54a9991880"),
                            Apellido = "Lopez",
                            Contacto = 31313131L,
                            Correo = "lopez@gmail.com",
                            Direccion = "gaitana",
                            NitProveedor = "39487358944",
                            Nombre = "Maicol Cardona"
                        });
                });

            modelBuilder.Entity("Entities.Models.Stock", b =>
                {
                    b.Property<Guid>("StockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StockId");

                    b.Property<int>("CantidadAlarma")
                        .HasColumnType("int");

                    b.Property<int>("CantidadIdeal")
                        .HasMaxLength(60)
                        .HasColumnType("int");

                    b.Property<int>("CantidadMinima")
                        .HasColumnType("int");

                    b.Property<int>("CantidadReal")
                        .HasMaxLength(60)
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaIngreso")
                        .HasColumnType("datetime2");

                    b.HasKey("StockId");

                    b.ToTable("Stocks");

                    b.HasData(
                        new
                        {
                            StockId = new Guid("e9208668-35d6-4862-b4f6-2b3fe8f6a525"),
                            CantidadAlarma = 5,
                            CantidadIdeal = 50,
                            CantidadMinima = 2,
                            CantidadReal = 150,
                            FechaIngreso = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified).AddTicks(24)
                        },
                        new
                        {
                            StockId = new Guid("f46678ca-5e2e-4b36-8d56-5eb110770bbe"),
                            CantidadAlarma = 5,
                            CantidadIdeal = 100,
                            CantidadMinima = 30,
                            CantidadReal = 250,
                            FechaIngreso = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified).AddTicks(22)
                        },
                        new
                        {
                            StockId = new Guid("9fffc55a-186f-4d62-88b4-78b43b2948c1"),
                            CantidadAlarma = 5,
                            CantidadIdeal = 40,
                            CantidadMinima = 10,
                            CantidadReal = 80,
                            FechaIngreso = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified).AddTicks(21)
                        });
                });

            modelBuilder.Entity("Entities.Models.Users.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "d0372260-2c7d-46ba-8cee-4df0c4d9d657",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "3084120c-5b5c-4686-956a-917f46dcf620",
                            Name = "Administrador",
                            NormalizedName = "ADMINISTRADOR"
                        },
                        new
                        {
                            Id = "776e19a0-9718-4de7-9f70-729d3e7d1908",
                            Name = "Cajero",
                            NormalizedName = "CAJERO"
                        },
                        new
                        {
                            Id = "278e2588-caf3-4a23-8843-7df5e2faea84",
                            Name = "Bodega",
                            NormalizedName = "BODEGA"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Entities.Models.DetalleFacturaCompra", b =>
                {
                    b.HasOne("Entities.Models.FacturaCompra", "FacturaCompra")
                        .WithMany("DetalleFacturaCompras")
                        .HasForeignKey("FacturaCompraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FacturaCompra");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("Entities.Models.DetalleFacturaVenta", b =>
                {
                    b.HasOne("Entities.Models.FacturaVenta", "FacturaVenta")
                        .WithMany()
                        .HasForeignKey("FacturaVentaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FacturaVenta");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("Entities.Models.FacturaCompra", b =>
                {
                    b.HasOne("Entities.Models.Proveedor", "Proveedores")
                        .WithMany("FacturaProvedor")
                        .HasForeignKey("ProveedoresIdProveedor");

                    b.Navigation("Proveedores");
                });

            modelBuilder.Entity("Entities.Models.FacturaVenta", b =>
                {
                    b.HasOne("Entities.Models.Cliente", "Cliente")
                        .WithMany("FacturasVentas")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("Entities.Models.MetodoPago", b =>
                {
                    b.HasOne("Entities.Models.FacturaVenta", "FacturaVenta")
                        .WithMany("MetodoPago")
                        .HasForeignKey("FacturaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FacturaVenta");
                });

            modelBuilder.Entity("Entities.Models.Precios", b =>
                {
                    b.HasOne("Entities.Models.Producto", "Producto")
                        .WithMany("HistoricoPrecios")
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("Entities.Models.Producto", b =>
                {
                    b.HasOne("Entities.Models.Categoria", "Categoria")
                        .WithMany("Productos")
                        .HasForeignKey("IdCategoria")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Stock", "Stock")
                        .WithMany("Productos")
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Entities.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Entities.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Entities.Models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Categoria", b =>
                {
                    b.Navigation("Productos");
                });

            modelBuilder.Entity("Entities.Models.Cliente", b =>
                {
                    b.Navigation("FacturasVentas");
                });

            modelBuilder.Entity("Entities.Models.FacturaCompra", b =>
                {
                    b.Navigation("DetalleFacturaCompras");
                });

            modelBuilder.Entity("Entities.Models.FacturaVenta", b =>
                {
                    b.Navigation("MetodoPago");
                });

            modelBuilder.Entity("Entities.Models.Producto", b =>
                {
                    b.Navigation("HistoricoPrecios");
                });

            modelBuilder.Entity("Entities.Models.Proveedor", b =>
                {
                    b.Navigation("FacturaProvedor");
                });

            modelBuilder.Entity("Entities.Models.Stock", b =>
                {
                    b.Navigation("Productos");
                });
#pragma warning restore 612, 618
        }
    }
}
